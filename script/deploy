#!/usr/bin/env bash
set -e # halt script on error
echo "START DEPLOY"
echo "============"

SOURCE_BRANCH="octopus"
TARGET_BRANCH="Master"

# Get the deploy key by using Travis's stored variables to decrypt deploy_key.enc
ENCRYPTED_KEY_VAR="encrypted_${ENCRYPTION_LABEL}_key"
ENCRYPTED_IV_VAR="encrypted_${ENCRYPTION_LABEL}_iv"
ENCRYPTED_KEY=${!ENCRYPTED_KEY_VAR}
ENCRYPTED_IV=${!ENCRYPTED_IV_VAR}
openssl aes-256-cbc -K $ENCRYPTED_KEY -iv $ENCRYPTED_IV -in CornwallCollegeTravisBot.enc -out CornwallCollegeTravisBot -d
chmod 600 CornwallCollegeTravisBot
eval `ssh-agent -s`
ssh-add CornwallCollegeTravisBot

REPO=`git config remote.origin.url`
SSH_REPO=${REPO/https:\/\/github.com\//git@github.com:}
SHA=`git rev-parse --verify HEAD`
COMMITTER_EMAIL= `git log HEAD^..HEAD --pretty='%aE'`


# Pull requests and commits to other branches shouldn't try to deploy, just build to verify
if [ "$TRAVIS_PULL_REQUEST" != "false" -o "$TRAVIS_BRANCH" != "$SOURCE_BRANCH" ]; then
    echo "Deploying to Test"
    
    echo "====================="
    echo "BICTON - TEST"
    echo "====================="
    
    git clone git@github.com:CornwallCollege/test-bicton-ac-uk.git ../out/bicton
    rm -rf ../out/bicton/*
    echo "================"
    echo "Directory Contents"
    ls ../out/bicton
    
    echo "====================="
    echo "File Copy Start."
    echo "====================="
    rsync -av ./_site/bicton_ac_uk/ ../out/bicton
    echo "====================="
    echo "File Copy Finish."
    echo "====================="
    
    pwd
    cd ../out/bicton
    pwd
    
    echo "====================="
    echo "Starting GIT publish."
    echo "====================="
    git config user.name "Travis CI"
    git config user.email "${COMMITTER_EMAIL}"

    #Detect if just new files have been added
    # git add -N .

    # If there are no changes to the compiled out (e.g. this is a README update) then just bail.
    #if [ -z `git diff --exit-code` ]; then
    #    echo "No changes to the output on this push; exiting."
    #    exit 0
    #fi
    #echo "Changes Detected deploying"
    
    # Commit the "changes", i.e. the new version.
    # The delta will show diffs between new and old versions.
    echo "Add Stage Changes"
    git add -A .
    git status
    echo "Deploying"
    git commit -m "Deploy to GitHub: ${SHA}"



    # Now that we're all set up, we can push.
    git push
    
    echo "====================="
    echo "CORNWALL - TEST"
    echo "====================="
    
    cd ../../
    pwd
    
    git clone git@github.com:CornwallCollege/test-cornwall-ac-uk.git ./out/cornwall
    rm -rf ./out/cornwall/*
    
    echo "====================="
    echo "File Copy Start."
    echo "====================="
    rsync -av ./www-v2/_site/cornwall_ac_uk/ ./out/cornwall
    echo "====================="
    echo "File Copy Finish."
    echo "====================="
    
    pwd
    cd ./out/cornwall
    pwd
    
    echo "====================="
    echo "Starting GIT publish."
    echo "====================="
    git config user.name "Travis CI"
    git config user.email "${COMMITTER_EMAIL}"

    #Detect if just new files have been added
    #git add -N .

    # If there are no changes to the compiled out (e.g. this is a README update) then just bail.
    #if [ -z `git diff --exit-code` ]; then
    #    echo "No changes to the output on this push; exiting."
    #    exit 0
    #fi
    
    echo "Staging Files"
    # Commit the "changes", i.e. the new version.
    # The delta will show diffs between new and old versions.
    git add -A .
    
    echo "Committing "
    git commit -m "Deploy to GitHub: ${SHA}"



    # Now that we're all set up, we can push.
    git push
    
    echo "====================="
    echo "DUCHY - TEST"
    echo "====================="
    
    cd ../../
    pwd
    
    git clone git@github.com:CornwallCollege/test-duchy-ac-uk.git ./out/duchy
    rm -rf ./out/duchy/*
    
    echo "====================="
    echo "File Copy Start."
    echo "====================="
    rsync -av ./www-v2/_site/duchy_ac_uk/ ./out/duchy
    echo "====================="
    echo "File Copy Finish."
    echo "====================="
    
    pwd
    cd ./out/duchy
    pwd
    
    echo "====================="
    echo "Starting GIT publish."
    echo "====================="
    git config user.name "Travis CI"
    git config user.email "${COMMITTER_EMAIL}"

    #Detect if just new files have been added
    git add -N .

    # If there are no changes to the compiled out (e.g. this is a README update) then just bail.
    #if [ -z `git diff --exit-code` ]; then
    #    echo "No changes to the output on this push; exiting."
    #    exit 0
    #fi

    # Commit the "changes", i.e. the new version.
    # The delta will show diffs between new and old versions.
    git add -A .
    git commit -m "Deploy to GitHub: ${SHA}"

    # Now that we're all set up, we can push.
    git push
    
    echo "====================="
    echo "FALMOUTH - TEST"
    echo "====================="
    
    cd ../../
    pwd
    
    git clone git@github.com:CornwallCollege/test-falmouthmarineschool-ac-uk.git ./out/falmouth
    rm -rf ./out/falmouth/*
    
    echo "====================="
    echo "File Copy Start."
    echo "====================="
    rsync -av ./www-v2/_site/falmouthmarineschool_ac_uk/ ./out/falmouth
    echo "====================="
    echo "File Copy Finish."
    echo "====================="
    
    pwd
    cd ./out/falmouth
    pwd
    
    echo "====================="
    echo "Starting GIT publish."
    echo "====================="
    git config user.name "Travis CI"
    git config user.email "${COMMITTER_EMAIL}"

    #Detect if just new files have been added
    #git add -N .

    # If there are no changes to the compiled out (e.g. this is a README update) then just bail.
    #if [ -z `git diff --exit-code` ]; then
    #    echo "No changes to the output on this push; exiting."
    #    exit 0
    #fi

    # Commit the "changes", i.e. the new version.
    # The delta will show diffs between new and old versions.
    git add -A .
    git commit -m "Deploy to GitHub: ${SHA}"

    # Now that we're all set up, we can push.
    git push
    
else
    echo "Deploying to Production"
    
    
    git clone git@github.com:CornwallCollege/www_static ../out

    # Clean out existing contents
    rm -rf ../out/*

    echo "====================="
    echo "File Copy Start."
    echo "====================="
    rsync -av ./_site/ ../out
    echo "====================="
    echo "File Copy Finish."
    echo "====================="


    pwd
    cd ../out
    pwd

    echo "====================="
    echo "Starting GIT publish."
    echo "====================="
    git config user.name "Travis CI"
    git config user.email "${COMMITTER_EMAIL}"

    #Detect if just new files have been added
    #git add -N .

    # If there are no changes to the compiled out (e.g. this is a README update) then just bail.
    #if [ -z `git diff --exit-code` ]; then
    #    echo "No changes to the output on this push; exiting."
    #    exit 0
    #fi

    # Commit the "changes", i.e. the new version.
    # The delta will show diffs between new and old versions.
    git add -A .
    git commit -m "Deploy to GitHub: ${SHA}"



    # Now that we're all set up, we can push.
    git push
fi



